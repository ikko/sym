graph TD
    subgraph "Symbol API Highlights"
        A[Symbol(name: str)] --> B[Globally Interned, Idempotent Constructor];
        A --> C[Symbol.next()];
        C --> D[Creates Auto-Numbered Symbol];
        A --> E[symbol.append(child)];
        A --> F[symbol.relate_to(other, how)];
        E --> G[Link Construction];
        F --> G;
        A --> H[symbol.tree()];
        A --> I[symbol.que()];
        A --> J[symbol.relate()];
        H --> K[Lazy Traversal];
        I --> K;
        J --> K;
        A --> L[symbol.patch(other)];
        L --> M[Recursive, Structural Deep Merge];
        A --> N[symbol.to_mmd()];
        N --> O[Outputs Mermaid Diagram Syntax];
        A --> P[symbol.to_ascii()];
        P --> Q[Outputs ASCII Art Representation];
        A --> R[symbol.delete()];
        R --> S[Removes Node and Inverse References];
        A --> T[symbol.elevate()];
        T --> U[Promotes Metadata to Attributes/Methods];
        A --> V[symbol.slim()];
        V --> W[Removes Unused Dynamically Applied Mixins];
        A --> X[symbol.immute()];
        X --> Y[Orchestrates Maturing Process];
        A --> Z[symbol.ref];
        Z --> AA[Alias for symbol.origin];
        A --> AB[Scheduler.add_job[job]];
        AB --> AC[Schedules a New Job for Execution];
    end

    style A fill:#FFD700,stroke:#333,stroke-width:2px;
    style B fill:#ADD8E6,stroke:#333,stroke-width:2px;
    style C fill:#90EE90,stroke:#333,stroke-width:2px;
    style D fill:#ADFF2F,stroke:#333,stroke-width:2px;
    style E fill:#90EE90,stroke:#333,stroke-width:2px;
    style F fill:#90EE90,stroke:#333,stroke-width:2px;
    style G fill:#ADFF2F,stroke:#333,stroke-width:2px;
    style H fill:#90EE90,stroke:#333,stroke-width:2px;
    style I fill:#90EE90,stroke:#333,stroke-width:2px;
    style J fill:#90EE90,stroke:#333,stroke-width:2px;
    style K fill:#ADFF2F,stroke:#333,stroke-width:2px;
    style L fill:#90EE90,stroke:#333,stroke-width:2px;
    style M fill:#ADFF2F,stroke:#333,stroke-width:2px;
    style N fill:#90EE90,stroke:#333,stroke-width:2px;
    style O fill:#ADFF2F,stroke:#333,stroke-width:2px;
    style P fill:#90EE90,stroke:#333,stroke-width:2px;
    style Q fill:#ADFF2F,stroke:#333,stroke-width:2px;
    style R fill:#90EE90,stroke:#333,stroke-width:2px;
    style S fill:#ADFF2F,stroke:#333,stroke-width:2px;
    style T fill:#90EE90,stroke:#333,stroke-width:2px;
    style U fill:#ADFF2F,stroke:#333,stroke-width:2px;
    style V fill:#90EE90,stroke:#333,stroke-width:2px;
    style W fill:#ADFF2F,stroke:#333,stroke-width:2px;
    style X fill:#90EE90,stroke:#333,stroke-width:2px;
    style Y fill:#ADFF2F,stroke:#333,stroke-width:2px;
    style Z fill:#90EE90,stroke:#333,stroke-width:2px;
    style AA fill:#ADFF2F,stroke:#333,stroke-width:2px;
    style AB fill:#90EE90,stroke:#333,stroke-width:2px;
    style AC fill:#ADFF2F,stroke:#333,stroke-width:2px;
